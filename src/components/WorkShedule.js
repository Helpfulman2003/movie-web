import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import WorkSheduleModal from "./WorkSheduleModal"; // Import modal

export default function WorkScheduleList() {
  const [workSchedules, setWorkSchedules] = useState([]); // Danh s√°ch hi·ªÉn th·ªã
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false); // Tr·∫°ng th√°i m·ªü modal

  // State ƒë·ªÉ th√™m l·ªãch l√†m vi·ªác
  const [ngayLam, setNgayLam] = useState("");
  const [gioBatDau, setGioBatDau] = useState("");
  const [gioKetThuc, setGioKetThuc] = useState("");
  const [loaiCaTruc, setLoaiCaTruc] = useState("");

  const navigate = useNavigate();

  // H√†m l·∫•y to√†n b·ªô danh s√°ch t·ª´ API
  const fetchAllSchedules = async () => {
    setLoading(true);
    try {
      const response = await fetch(`http://localhost:8080/workSchedule`);
      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status}`);
      }
      const data = await response.json();
      setWorkSchedules(data.data || []);
    } catch (error) {
      console.error("L·ªói khi g·ªçi API:", error.message);
    } finally {
      setLoading(false);
    }
  };

  // G·ªçi API l·∫ßn ƒë·∫ßu khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    fetchAllSchedules();
  }, []);

  // H√†m th√™m l·ªãch l√†m vi·ªác m·ªõi
  const handleAddSchedule = async () => {
    if (!ngayLam || !gioBatDau || !gioKetThuc || !loaiCaTruc) {
      alert("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    const newSchedule = {
      ngayLam,
      gioBatDau,
      gioKetThuc,
      loaiCaTruc,
    };

    try {
      const response = await fetch(`http://localhost:8080/workSchedule`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(newSchedule),
      });

      if (!response.ok) {
        throw new Error(`L·ªói t·∫°o l·ªãch l√†m vi·ªác: ${response.statusText}`);
      }

      const data = await response.json();
      setWorkSchedules([...workSchedules, data.data]); // C·∫≠p nh·∫≠t danh s√°ch hi·ªÉn th·ªã

      // Reset form sau khi th√™m
      setNgayLam("");
      setGioBatDau("");
      setGioKetThuc("");
      setLoaiCaTruc("");
      setIsModalOpen(false); // ƒê√≥ng modal

      alert("Th√™m l·ªãch l√†m vi·ªác th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói khi th√™m l·ªãch l√†m vi·ªác:", error);
    }
  };

  // üóëÔ∏è H√†m x√≥a l·ªãch l√†m vi·ªác
  const handleDelete = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªãch l√†m vi·ªác n√†y kh√¥ng?")) {
      try {
        const response = await fetch(`http://localhost:8080/workSchedule/${id}`, {
          method: "DELETE",
        });

        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          fetchAllSchedules(); // Load l·∫°i danh s√°ch sau khi x√≥a
        } else {
          alert("L·ªói khi x√≥a: " + result.message);
        }
      } catch (error) {
        console.error("L·ªói khi x√≥a:", error.message);
      }
    }
  };

  return (
    <div className="container">
      <h1>Qu·∫£n l√Ω l·ªãch l√†m vi·ªác</h1>

      {/* N√∫t th√™m m·ªõi */}
      <button className="add-btn" onClick={() => setIsModalOpen(true)}>
        Th√™m m·ªõi
      </button>

      {/* Modal th√™m l·ªãch l√†m vi·ªác */}
      <WorkSheduleModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        ngayLam={ngayLam}
        setNgayLam={setNgayLam}
        gioBatDau={gioBatDau}
        setGioBatDau={setGioBatDau}
        gioKetThuc={gioKetThuc}
        setGioKetThuc={setGioKetThuc}
        loaiCaTruc={loaiCaTruc}
        setLoaiCaTruc={setLoaiCaTruc}
        handleAddSchedule={handleAddSchedule}
      />

      <div className="work-schedule-container">
        <h2>Danh s√°ch l·ªãch l√†m vi·ªác</h2>
        {loading ? (
          <p className="loading-text">ƒêang t·∫£i...</p>
        ) : (
          <table className="work-schedule-table">
            <thead>
              <tr>
                <th>Ng√†y l√†m</th>
                <th>Gi·ªù b·∫Øt ƒë·∫ßu</th>
                <th>Gi·ªù k·∫øt th√∫c</th>
                <th>Ca tr·ª±c</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>
            <tbody>
              {workSchedules.length > 0 ? (
                workSchedules.map((ws, index) => (
                  <tr key={index}>
                    <td>{new Date(ws.ngayLam).toLocaleDateString("vi-VN")}</td>
                    <td>{new Date(ws.gioBatDau).toLocaleTimeString()}</td>
                    <td>{new Date(ws.gioKetThuc).toLocaleTimeString()}</td>
                    <td>{ws.loaiCaTruc}</td>
                    <td>
                      <button
                        className="update-btn"
                        onClick={() => navigate(`/update/${ws._id}`)}
                      >
                        C·∫≠p nh·∫≠t
                      </button>
                      <button
                        className="delete-btn"
                        onClick={() => handleDelete(ws._id)}
                      >
                        X√≥a
                      </button>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="5" className="no-data">
                    Kh√¥ng c√≥ l·ªãch l√†m vi·ªác.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
}